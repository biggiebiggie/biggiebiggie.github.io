{"version":3,"sources":["pages/currentweather/Currentweather.js","pages/about/About.js","App.js","serviceWorker.js","index.js"],"names":["Currentweather","state","loading","city","weather","cityName","undefined","apiKey","url","this","props","fetch","response","json","data","setState","main","console","log","type","onChange","event","target","value","onClick","handleCityChange","name","src","icon","description","temp","feels_like","temp_max","temp_min","wind","speed","Component","About","handleRedirect","history","push","App","onCityChange","className","to","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oVAKqBA,E,2MACnBC,MAAQ,CACNC,SAAS,EACTC,KAAM,KACNC,QAAS,KACTC,cAAUC,EACVC,OAAQ,oC,8MAIFC,E,4DAA2DC,KAAKC,MACnEL,S,kBAAkBI,KAAKR,MAAMM,O,0BACTI,MAAMH,G,cAAvBI,E,gBACaA,EAASC,O,OAAtBC,E,OAENL,KAAKM,SAAS,CACZZ,KAAMW,EACNZ,SAAS,EACTE,QAASU,EAAKV,QAAQ,GAAGY,KACzBX,SAAUI,KAAKC,MAAML,WAEvBY,QAAQC,IAAIT,KAAKC,O,qIAGT,IAAD,SACmBD,KAAKR,MAAvBE,EADD,EACCA,KAAMC,EADP,EACOA,QAEd,OADAa,QAAQC,IAAIT,KAAKC,OAEf,6BACE,6BACE,2BACES,KAAK,OACLC,SAAU,SAAAC,GAAK,OAAI,EAAKN,SAAS,CAAEV,SAAUgB,EAAMC,OAAOC,WAE5D,4BACEC,QAAS,kBAAM,EAAKd,MAAMe,iBAAiB,EAAKxB,MAAMI,YADxD,gBAMDI,KAAKR,MAAMC,QACR,kBAAC,YAAD,2BACA,6BACE,6BACE,sDAC0BC,EAAKuB,OAGjC,6BACE,yBACEC,IAAG,2CAAsCxB,EAAKC,QAAQ,GACnDwB,KADA,UAEF,IACFxB,GAEH,kEACqCD,EAAKC,QAAQ,GAAGyB,aAErD,6BACE,6BACE,kBAAC,IAAD,MADF,IACyB1B,EAAKa,KAAKc,KADnC,sBAC6D,IAC1D3B,EAAKa,KAAKe,WAFb,WAIA,qDACwB5B,EAAKa,KAAKgB,SADlC,WAGA,qDACwB7B,EAAKa,KAAKiB,SADlC,WAGA,6BACE,kBAAC,IAAD,MACC,IAAM9B,EAAK+B,KAAKC,MAFnB,4B,GArE4BC,aCHvBC,E,2MACnBC,eAAiB,WACf,EAAK5B,MAAM6B,QAAQC,KAAK,M,wEAIxB,OACE,6BACE,qCACA,oFACA,mFACA,uFACA,mDACqB,6BADrB,sBAC8C,6BAD9C,uBACwE,6BADxE,kBAKA,4BAAQhB,QAASf,KAAK6B,gBAAtB,yB,GAjB2BF,aC6CpBK,E,2MAxCbxC,MAAQ,CACNI,SAAU,c,EAGZqC,aAAe,SAAArC,GACb,EAAKU,SAAS,CAAEV,c,wEAER,IAAD,OACP,OACE,yBAAKsC,UAAU,OACb,8CACA,kBAAC,IAAD,KACE,6BACE,4BACE,kBAAC,IAAD,CAAMC,GAAG,KAAT,oBAEF,4BACE,kBAAC,IAAD,CAAMA,GAAG,UAAT,WAIJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CACEC,OAAK,EACLC,KAAK,IACLC,UAAW,SAAArC,GAAK,OACd,kBAAC,EAAD,iBACMA,EADN,CAEEL,SAAU,EAAKJ,MAAMI,SACrBoB,iBAAkB,EAAKiB,mBAG7B,kBAAC,IAAD,CAAOI,KAAK,SAASC,UAAW,SAAArC,GAAK,OAAI,kBAAC,EAAUA,a,GAjC9C0B,aCMEY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/C,QAAQ+C,MAAMA,EAAMC,c","file":"static/js/main.90782274.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { BarLoader } from \"react-spinners\";\nimport { FaWind } from \"react-icons/fa\";\nimport { FaTemperatureHigh } from \"react-icons/fa\";\n\nexport default class Currentweather extends Component {\n  state = {\n    loading: true,\n    city: null,\n    weather: null,\n    cityName: undefined,\n    apiKey: \"45528f6f065c003e2c93fbefe75be00a\"\n  };\n\n  async componentDidMount() {\n    const url = `https://api.openweathermap.org/data/2.5/weather?q=${this.props\n      .cityName}&appid=${this.state.apiKey}&units=metric`;\n    const response = await fetch(url);\n    const data = await response.json();\n\n    this.setState({\n      city: data,\n      loading: false,\n      weather: data.weather[0].main,\n      cityName: this.props.cityName\n    });\n    console.log(this.props);\n  }\n\n  render() {\n    const { city, weather } = this.state;\n    console.log(this.props);\n    return (\n      <div>\n        <div>\n          <input\n            type=\"text\"\n            onChange={event => this.setState({ cityName: event.target.value })}\n          />\n          <button\n            onClick={() => this.props.handleCityChange(this.state.cityName)}\n          >\n            Search City\n          </button>\n        </div>\n        {this.state.loading\n          ? <BarLoader>Loading weather...</BarLoader>\n          : <div>\n              <div>\n                <h1>\n                  This is the weather in {city.name}\n                </h1>\n              </div>\n              <div>\n                <img\n                  src={`http://openweathermap.org/img/wn/${city.weather[0]\n                    .icon}.png`}\n                />{\" \"}\n                {weather}\n              </div>\n              <div>\n                The weather will be consisting of {city.weather[0].description}\n              </div>\n              <div>\n                <div>\n                  <FaTemperatureHigh /> {city.main.temp} &#8451;, feels like{\" \"}\n                  {city.main.feels_like} &#8451;\n                </div>\n                <div>\n                  Highest temperature: {city.main.temp_max} &#8451;\n                </div>\n                <div>\n                  Highest temperature: {city.main.temp_min} &#8451;\n                </div>\n                <div>\n                  <FaWind />\n                  {\" \" + city.wind.speed} meters pr second\n                </div>\n              </div>\n            </div>}\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class About extends Component {\n  handleRedirect = () => {\n    this.props.history.push(\"/\");\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>About</h1>\n        <div>This weather page has been made with OpenWeatherApi</div>\n        <div>Made by Elias Marco Lip, Webdevelopment KEA (2020)</div>\n        <div>Standard city is Copenhagen, you can search for cities</div>\n        <div>\n          Things to improve: <br />Check if valid city<br />Make 5 days forecast<br />Style\n          the page\n        </div>\n\n        <button onClick={this.handleRedirect}>Redirect to home</button>\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\nimport Currentweather from \"./pages/currentweather/Currentweather\";\nimport About from \"./pages/about/About\";\n\nclass App extends Component {\n  state = {\n    cityName: \"Copenhagen\"\n  };\n\n  onCityChange = cityName => {\n    this.setState({ cityName });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>My Weather App</h1>\n        <Router>\n          <nav>\n            <ul>\n              <Link to=\"/\">Current weather</Link>\n            </ul>\n            <ul>\n              <Link to=\"/about\">About</Link>\n            </ul>\n          </nav>\n\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={props =>\n                <Currentweather\n                  {...props}\n                  cityName={this.state.cityName}\n                  handleCityChange={this.onCityChange}\n                />}\n            />\n            <Route path=\"/about\" component={props => <About {...props} />} />\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}